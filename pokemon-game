class Trainer:
  def __init__(self, trainer_name, held_pokemon, potions=None, active_pokemon_number=0):
    self.held_pokemon = held_pokemon
    self.trainer_name = trainer_name
    self.potions = potions
    self.active_number = active_pokemon_number
    self.active_pokemon = self.held_pokemon[self.active_number]
    self.active_pokemon_name = self.held_pokemon[self.active_number].name

  def potion(self):
    statement = self.held_pokemon[self.active_number].heal_hp(20)
    return statement

  def attack(self, attacker, defender):
    attacking_pokemon = attacker.held_pokemon[attacker.active_number]
    defending_pokemon = defender.held_pokemon[defener.active_number]
    damage = 1  #set damage multiplier
    print(self.trainer_name + "'s " + attacker.active_pokemon_name + " attacked " + receiver.trainer_name + "'s " + receiving_pokemon.name)
    if types_strong_against[self.typ] == receiving_pokemon.typ:
      damage = 2*damage
    weakness_list = types_weaknesses[self.typ]
    for pokemon_type in weakness_list:
        if pokemon_type == receiving_pokemon.typ:
          damage = damage/2
    return receiving_pokemon.lose_hp(self.level*damage)

  def fainted(self):
    print("XXXX " + player2.trainer_name + "'s " + self.name.upper() + " HAS FAINTED. XXXX") 
    #distinguish between who is the trainer attacking and the opponent being attacked
    trainers_name = player1
    opponent_name = player2
    #set the active pokemon's status to fainted
    opponent_name.held_pokemon[opponent_name.active_number].ko = True
    #print(trainers_name.held_poke[trainers_name.active].ko)
    opponent_name.active_number += 1
    try:
      statement = opponent_name.held_poke[opponent_name.active].name + " is now the active Pokemon with " + str(opponent_name.held_poke[opponent_name.active].current_hp) + " HP"
    except:
      statement = str(opponent_name.name) + " has no more pokemon.\n" + str(opponent_name.name) + " blacked out!"
      return statement
    #print(opponent_name.active)
    #if opponent_name.held_poke[opponent_name.active].ko == False:
    #statement = opponent_name.held_poke[opponent_name.active].name + " is now the active Pokemon"
    #print(statement)
    return statement
    #else:
      #statement = str(opponent_name.name) + " has no more pokemon.\n" + str(opponent_name.name) + " blacked out!"
      #game_end = True
   # return statement

  def move():
    move_options = {
     '1': None,
     '2': Trainer.potion(trainer_1),
     '3': Pokemon.revive(trainer_1.held_pokemon[-1]),
     '4': None #end_game()
     }
    print("""
Press 1 to attack
      2 to give active pokemon a potion
      3 to revive a pokemon
      4 to run away
""")
    ask_for_move = input("What would you like to do? ")

class Pokemon:
  def __init__(self, name, level, typ, max_hp, ko=False):
    self.name = name
    self.level = level
    self.typ = typ
    self.max_hp = max_hp
    self.current_hp = max_hp
    self.ko = ko

  def state_health(self):
    statement = self.name + " now has " + str(self.current_hp) + " health"
    return statement
  
  def revive(self):
    if self.ko == True:
      statement = self.name + " has been revived to full health"
      self.current_hp = self.max_hp
      self.ko = False
      return statement 
    else:
      print("It failed because the pokemon isn't knocked out")
 
  def heal_hp(self, increase):
    new_current_hp = self.current_hp + increase
    if new_current_hp >=self.max_hp:
      self.current_hp = self.max_hp
      return Pokemon.state_health(self)
    else:
      self.current_hp = new_current_hp
      return Pokemon.state_health(self)
    
  def lose_hp(self, decrease):
    new_current_hp = self.current_hp - decrease
    if new_current_hp <=0:
      self.current_hp = 0
      return Trainer.fainted(self)
    else:
      self.current_hp = new_current_hp
      return Pokemon.state_health(self)

types_weaknesses = {"Fire": ["Water", "Fire"],
                "Water": ["Grass", "Water"],
                "Grass": ["Fire", "Grass"]}
types_strong_against = {"Fire": "Grass",
                "Water": "Fire",
                "Grass": "Water"}
#instantiate the different pokemon
charmander = Pokemon("Charmander", 5, "Fire", 20)
squirtle = Pokemon("Squirtle", 5, "Water", 30)
bulbasaur = Pokemon("Bulbasaur", 5, "Grass", 19)
charmander_1 = charmander
charmander_2 = Pokemon("Charmander", 5, "Fire", 20)
#instantiate the two trainers
trainer_1 = Trainer("Trainer 1", [charmander_1], 4, 0)
trainer_2 = Trainer("Trainer 2", [charmander_2], 4, 0)

players = [trainer_1, trainer_2]
#list the players and their pokemon
for player in players: 
  starting_list = []
  for pokemon in player.held_pokemon:
    starting_list.append(pokemon.name)
  print(player.trainer_name + " has " + ", ".join(starting_list))
turn = 1

while turn < 10:
  print("Round number: ", turn)
  #player 1 is attacker and computer is defender
  attacker = trainer_1
  defender = trainer_2
  trainer_move = Trainer.move()
  #Computer is attacker and player 1 is defender
  attacker = trainer_2
  defender = trainer_1
  Trainer.attack(attacker, defender.held_pokemon[player1.active_number])
  turn+=1


  
 # print(Pokemon.attack(depps.held_poke[mekka.active], 

#print(mekka.held_poke[mekka.active].name)
#{print(Pokemon.attack(squirtle, charmander))
#print(Trainer.potion(mekka))
#print(Pokemon.attack(charmander, squirtle))
#print(Pokemon.attack(squirtle, charmander))
#print(Pokemon.attack(charmander, squirtle))
#print(Pokemon.attack(squirtle, charmander))
#print(mekka.active)
#print(mekka.held_poke[mekka.active].name + " is now the active Pokemon")
#print(Trainer.potion(mekka))
